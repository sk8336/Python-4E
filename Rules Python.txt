* Must start with letter or underscore_
* Must consists of letters, numbers, and underscores
* Case sensitive
* Reminder% and Power ** , Quotient //
* Operator precedence = Parenthesis > Power > Multiplication > Addition > Left to Right

* Python knows '+' means addition for numeric and concatenate for string.
* String conversion int(), float()
* Comments #
* Puzzle- for word in words, for silce in pizza

CH3
 == Is this equal to

CH4 Functions
math.sqrt() math.pi()
random.random() random.randint(5, 10) random.choice(t)

Void functions might display something on the screen or have some other effect,
but they don’t have a return value. If you try to assign the result to a variable,
you get a special value called None.

****
>>> fruit = 'banana'
>>> letter = fruit[1]
The expression in brackets is called an index. The index indicates which character
in the sequence you want (hence the name).


strings are immutable, which means you can’t
change an existing string. The best you can do is create a new string that is a
variation on the original:

help(str.translate)
string.upper()
index = word.find('a')
One common task is to remove white space (spaces, tabs, or newlines) from the
beginning and end of a string using the strip() method:

You will note that startswith() requires case to match, so sometimes we take a line
and map it all to lowercase before we do any checking using the lower method.

The following example uses %d to format an integer, %g to format a floating-point
number (don’t ask why), and %s to format a string:

Like a string, a list is a sequence of values. In a string, the values are characters;
in a list, they can be any type. The values in list are called elements or sometimes
items.

pop modifies the list and returns the element that was removed.
If you don’t need the removed value, you can use the del operator:


Because list is the name of a built-in function, you should avoid using it as
a variable name


if you want to break a string into words, you can use the split(delimiter) method:

join() is the inverse of split.


To check whether two variables refer to the same object, you can use the is operator.
In this case we would say that the two lists are equivalent, because they have the
same elements, but not identical, because they are not the same object. If two
objects are identical, they are also equivalent, but if they are equivalent, they are
not necessarily identical.


To see whether something appears as a value in a dictionary, you can use the
method values, which returns the values as a type that can be converted to a list,
and then use the in operator:
>>> vals = list(eng2sp.values())
>>> 'uno' in vals
True
